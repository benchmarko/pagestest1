{"version":3,"file":"pagestest1.js","sources":["../src/arithmetic.ts","../src/Log.ts","../src/parser.ts"],"sourcesContent":["// arithmetics.ts\n//\nexport const arithmetic = {\n  grammar:\n    `\n    Arithmetic {\n    Program\n      = Line*\n\n    Line\n      = Label? Statements Comment? (eol | end)\n\n    Label\n     = label\n\n    Statements\n     = Statement (\":\" Statement)*\n\n    Statement\n     = Comment\n     | Comparison\n     | Cls\n     | Data\n     | Dim\n     | End\n     | ForLoop\n     | Gosub\n     | Next\n     | On\n     | Print\n     | Read\n     | Rem\n     | Restore\n     | Return\n     | Stop\n     | WhileLoop\n     | Wend\n     | ArrayAssign\n     | Assign\n\n    ArrayAssign\n      = ArrayIdent \"=\" NumExp\n      | StrArrayIdent \"=\" StrExp\n\n    Abs\n      = caseInsensitive<\"abs\"> \"(\" NumExp \")\"\n\n    Asc\n      = caseInsensitive<\"asc\"> \"(\" StrExp \")\"\n\n    Atn\n      = caseInsensitive<\"atn\"> \"(\" NumExp \")\"\n\n    Assign\n      = ident \"=\" NumExp\n      | strIdent \"=\" StrExp\n\n    Bin\n      = caseInsensitive<\"bin$\"> \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Chr\n      = caseInsensitive<\"chr$\"> \"(\" NumExp \")\"\n\n    Cint\n      = caseInsensitive<\"cint\"> \"(\" NumExp \")\"\n\n    Cls\n      = caseInsensitive<\"cls\">\n\n    Comment\n      = \"\\\\'\" partToEol\n\n    Cos\n      = caseInsensitive<\"cos\"> \"(\" NumExp \")\"\n\n    DataItem\n      = string | number\n\n    Data\n      = caseInsensitive<\"data\"> NonemptyListOf<DataItem, \",\">  // TODO: also hex number?\n\n    Dim\n      = caseInsensitive<\"dim\"> NonemptyListOf<DimArrayIdent, \",\">\n\n    End\n      = caseInsensitive<\"end\">\n\n    Exp\n      = caseInsensitive<\"exp\"> \"(\" NumExp \")\"\n\n    Fix\n      = caseInsensitive<\"fix\"> \"(\" NumExp \")\"\n\n    ForLoop\n      = caseInsensitive<\"for\"> variable \"=\" NumExp caseInsensitive<\"to\"> NumExp (caseInsensitive<\"step\"> NumExp)?\n\n    Gosub\n      = caseInsensitive<\"gosub\"> label\n\n    Hex\n      = caseInsensitive<\"hex$\"> \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Int\n      = caseInsensitive<\"int\"> \"(\" NumExp \")\"\n\n    Left\n      = caseInsensitive<\"left$\"> \"(\" StrExp \",\" NumExp \")\"\n\n    Len\n      = caseInsensitive<\"len\"> \"(\" StrExp \")\"\n\n    Log\n      = caseInsensitive<\"log\"> \"(\" NumExp \")\"\n\n    Log10\n      = caseInsensitive<\"log10\"> \"(\" NumExp \")\"\n\n    Lower\n      = caseInsensitive<\"lower$\"> \"(\" StrExp \")\"\n\n    Max\n      = caseInsensitive<\"max\"> \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    Mid\n      = caseInsensitive<\"mid$\"> \"(\" StrExp \",\" NumExp (\",\" NumExp)? \")\"\n\n    Min\n      = caseInsensitive<\"min\"> \"(\" NonemptyListOf<NumExp, \",\"> \")\"\n\n    Pi\n      = caseInsensitive<\"pi\">\n\n    Next\n     = caseInsensitive<\"next\"> ListOf<variable, \",\">\n\n    On\n     = caseInsensitive<\"on\"> NumExp caseInsensitive<\"gosub\"> NonemptyListOf<label, \",\">\n\n    Print\n      = (caseInsensitive<\"print\"> | \"?\") PrintArgs? (\";\")?\n\n    PrintArgs\n      = PrintArg ((\",\" | \";\") PrintArg)*\n\n    PrintArg\n      = StrOrNumExp\n\n    ReadItem\n      = StrArrayIdent\n      | ArrayIdent\n      | strIdent\n      | ident\n\n    Read\n      = caseInsensitive<\"read\"> NonemptyListOf<ReadItem, \",\">\n\n    Rem\n      = caseInsensitive<\"Rem\"> partToEol\n\n    Restore\n      = caseInsensitive<\"Restore\"> label?\n\n    Return\n      = caseInsensitive<\"return\">\n\n    Right\n      = caseInsensitive<\"right$\"> \"(\" StrExp \",\" NumExp \")\"\n\n    Rnd\n      = caseInsensitive<\"rnd\"> \"(\" NumExp? \")\"\n    \n    Round\n      = caseInsensitive<\"round\"> \"(\" NumExp (\",\" NumExp)? \")\"\n\n    Sgn\n      = caseInsensitive<\"sgn\"> \"(\" NumExp \")\"\n\n    Sin\n      = caseInsensitive<\"sin\"> \"(\" NumExp \")\"\n\n    Space2\n      = caseInsensitive<\"space$\"> \"(\" NumExp \")\"\n\n    Sqr\n      = caseInsensitive<\"sqr\"> \"(\" NumExp \")\"\n\n    Stop\n      = caseInsensitive<\"stop\">\n\n    Str\n      = caseInsensitive<\"str$\"> \"(\" NumExp \")\"\n\n    String2\n      = caseInsensitive<\"string$\"> \"(\" NumExp \",\" StrExp \")\"\n\n    Tan\n      = caseInsensitive<\"tan\"> \"(\" NumExp \")\"\n\n    Time\n      = caseInsensitive<\"time\">\n\n    Upper\n      = caseInsensitive<\"upper$\"> \"(\" StrExp \")\"\n\n    Val\n      = caseInsensitive<\"val\"> \"(\" StrExp \")\"\n\n    Wend\n      = caseInsensitive<\"wend\">\n\n    WhileLoop\n      = caseInsensitive<\"while\"> StrOrNumExp\n\n    Comparison\n      = caseInsensitive<\"if\"> StrOrNumExp caseInsensitive<\"then\"> Statements (caseInsensitive<\"else\"> Statements)?\n\n    StrExp\n      = StrOrExp\n\n    StrOrExp\n      = StrAndExp caseInsensitive<\"or\"> StrOrExp  -- or\n      | StrAndExp\n\n    StrAndExp\n      = StrCmpExp caseInsensitive<\"and\"> StrAndExp  -- and\n      | StrCmpExp\n\n    StrCmpExp\n      = StrCmpExp \"=\" StrAddExp  -- eq\n      | StrCmpExp \"<>\" StrAddExp  -- ne\n      | StrAddExp\n\n    StrAddExp\n      = StrAddExp \"+\" StrPriExp  -- plus\n      | StrPriExp\n\n    StrPriExp\n      = \"(\" StrExp \")\"  -- paren\n      | Bin\n      | Chr\n      | Hex\n      | Left\n      | Lower\n      | Mid\n      | Right\n      | Space2\n      | Str\n      | String2\n      | Upper\n      | StrArrayIdent\n      | strIdent\n      | string\n\n    StrOrNumExp\n      = StrExp | NumExp\n\n    NumExp\n      = XorExp\n\n    XorExp\n      = OrExp caseInsensitive<\"xor\"> XorExp  -- xor\n      | OrExp\n\n    OrExp\n      = AndExp caseInsensitive<\"or\"> OrExp  -- or\n      | AndExp\n\n    AndExp\n      = NotExp caseInsensitive<\"and\"> AndExp  -- and\n      | NotExp\n\n    NotExp\n      = caseInsensitive<\"not\"> NotExp  -- not\n      | CmpExp\n\n    CmpExp\n      = CmpExp \"=\" AddExp  -- eq\n      | CmpExp \"<>\" AddExp  -- ne\n      | CmpExp \"<\" AddExp  -- lt\n      | CmpExp \"<=\" AddExp  -- le\n      | CmpExp \">\" AddExp  -- gt\n      | CmpExp \">=\" AddExp  -- ge\n      | AddExp\n\n    AddExp\n      = AddExp \"+\" ModExp  -- plus\n      | AddExp \"-\" ModExp  -- minus\n      | ModExp\n\n    ModExp\n      = ModExp caseInsensitive<\"mod\"> DivExp -- mod\n      | DivExp\n\n    DivExp\n      = DivExp \"\\\\\\\\\" MulExp -- div\n      | MulExp\n\n    MulExp\n      = MulExp \"*\" ExpExp  -- times\n      | MulExp \"/\" ExpExp  -- divide\n      | ExpExp\n\n    ExpExp\n      = PriExp \"^\" ExpExp  -- power\n      | PriExp\n\n    PriExp\n      = \"(\" NumExp \")\"  -- paren\n      | \"+\" PriExp   -- pos\n      | \"-\" PriExp   -- neg\n      | ArrayIdent\n      | ident\n      | number\n      | Abs\n      | Asc\n      | Atn\n      | Cint\n      | Cos\n      | Exp\n      | Fix\n      | Int\n      | Len\n      | Log\n      | Log10\n      | Max\n      | Min\n      | Pi\n      | Rnd\n      | Round\n      | Sgn\n      | Sin\n      | Sqr\n      | Tan\n      | Time\n      | Val\n\n\n    ArrayArgs\n      = NonemptyListOf<StrOrNumExp, \",\">\n\n    ArrayIdent\n      = ident \"(\" ArrayArgs \")\"\n\n    StrArrayIdent\n      = strIdent \"(\" ArrayArgs \")\"\n\n    DimArrayIdent\n      = ident \"(\" ArrayArgs \")\"\n      | strIdent \"(\" ArrayArgs \")\"\n\n    keyword\n      = abs | after | and | asc | atn | auto | bin | border | break\n      | call | cat | chain | chr | cint | clear | clg | closein | closeout | cls | cont | copychr | cos | creal | cursor\n      | data | dec | def | defint | defreal | defstr | deg | delete | derr | di | dim | draw | drawr\n      | edit | ei | else | end2 | ent | env | eof | erase | erl | err | error | every | exp | fill | fix | fn | for | frame | fre | gosub | goto | graphics\n      | hex | himem | if | ink | inkey | inp | input | instr | int | joy | key | left | len | let | line | list | load | locate | log | log10 | lower2\n      | mask | max | memory | merge | mid | min | mod | mode | move | mover | new | next | not | on | openin | openout | or | origin | out\n      | paper | peek | pen | pi | plot | plotr | poke | pos | print\n      | rad | randomize | read | release | rem | remain | renum | restore | resume | return | right | rnd | round | run\n      | save | sgn | sin | sound | space2 | spc | speed | sq | sqr | step | stop | str | string2 | swap | symbol\n      | tab | tag | tagoff | tan | test | testr | then | time | to | troff | tron | unt | upper2 | using\n      | val | vpos | wait | wend | while | width | window | write | xor | xpos | ypos | zone\n\n\n    abs\n       = caseInsensitive<\"abs\"> ~identPart\n    after\n      = caseInsensitive<\"after\"> ~identPart\n    and\n    = caseInsensitive<\"and\"> ~identPart\n    asc\n    = caseInsensitive<\"asc\"> ~identPart\n    atn\n    = caseInsensitive<\"atn\"> ~identPart\n    auto\n    = caseInsensitive<\"auto\"> ~identPart\n    bin\n    = caseInsensitive<\"bin$\"> ~identPart\n    border\n    = caseInsensitive<\"border\"> ~identPart\n    break\n    = caseInsensitive<\"break\"> ~identPart\n    call\n    = caseInsensitive<\"call\"> ~identPart\n    cat\n    = caseInsensitive<\"cat\"> ~identPart\n    chain\n    = caseInsensitive<\"chain\"> ~identPart\n    chr\n    = caseInsensitive<\"chr$\"> ~identPart\n    cint\n    = caseInsensitive<\"cint\"> ~identPart\n    clear\n    = caseInsensitive<\"clear\"> ~identPart\n    clg\n    = caseInsensitive<\"clg\"> ~identPart\n    closein\n    = caseInsensitive<\"closein\"> ~identPart\n    closeout\n    = caseInsensitive<\"closeout\"> ~identPart\n    cls\n    = caseInsensitive<\"cls\"> ~identPart\n    cont\n    = caseInsensitive<\"cont\"> ~identPart\n    copychr\n    = caseInsensitive<\"copychr$\"> ~identPart\n    cos\n    = caseInsensitive<\"cos\"> ~identPart\n    creal\n    = caseInsensitive<\"creal\"> ~identPart\n    cursor\n    = caseInsensitive<\"cursor\"> ~identPart\n    data\n    = caseInsensitive<\"data\"> ~identPart\n    dec\n    = caseInsensitive<\"dec\"> ~identPart\n    def\n    = caseInsensitive<\"def\"> ~identPart\n    defint\n    = caseInsensitive<\"defint\"> ~identPart\n    defreal\n    = caseInsensitive<\"defreal\"> ~identPart\n    defstr\n    = caseInsensitive<\"defstr\"> ~identPart\n    deg\n    = caseInsensitive<\"deg\"> ~identPart\n    delete\n    = caseInsensitive<\"delete\"> ~identPart\n    derr\n    = caseInsensitive<\"derr\"> ~identPart\n    di\n    = caseInsensitive<\"di\"> ~identPart\n    dim\n    = caseInsensitive<\"dim\"> ~identPart\n    draw\n    = caseInsensitive<\"draw\"> ~identPart\n    drawr\n    = caseInsensitive<\"drawr\"> ~identPart\n    edit\n    = caseInsensitive<\"edit\"> ~identPart\n    ei\n    = caseInsensitive<\"ei\"> ~identPart\n    else\n    = caseInsensitive<\"else\"> ~identPart\n    end2\n    = caseInsensitive<\"end\"> ~identPart\n    ent\n    = caseInsensitive<\"ent\"> ~identPart\n    env\n    = caseInsensitive<\"env\"> ~identPart\n    eof\n    = caseInsensitive<\"eof\"> ~identPart\n    erase\n    = caseInsensitive<\"erase\"> ~identPart\n    erl\n    = caseInsensitive<\"erl\"> ~identPart\n    err\n    = caseInsensitive<\"err\"> ~identPart\n    error\n    = caseInsensitive<\"error\"> ~identPart\n    every\n    = caseInsensitive<\"every\"> ~identPart\n    exp\n    = caseInsensitive<\"exp\"> ~identPart\n    fill\n    = caseInsensitive<\"fill\"> ~identPart\n    fix\n    = caseInsensitive<\"fix\"> ~identPart\n    fn\n    = caseInsensitive<\"fn\"> ~identPart\n    for\n    = caseInsensitive<\"for\"> ~identPart\n    frame\n    = caseInsensitive<\"frame\"> ~identPart\n    fre\n    = caseInsensitive<\"fre\"> ~identPart\n    gosub\n    = caseInsensitive<\"gosub\"> ~identPart\n    goto\n    = caseInsensitive<\"goto\"> ~identPart\n    graphics\n    = caseInsensitive<\"graphics\"> ~identPart\n    hex\n    = caseInsensitive<\"hex$\"> ~identPart\n    himem\n    = caseInsensitive<\"himem\"> ~identPart\n    if\n    = caseInsensitive<\"if\"> ~identPart\n    ink\n    = caseInsensitive<\"ink\"> ~identPart\n    inkey\n    = caseInsensitive<\"inkey\"> ~identPart\n    | caseInsensitive<\"inkey$\"> ~identPart\n    inp\n    = caseInsensitive<\"inp\"> ~identPart\n    input\n    = caseInsensitive<\"input\"> ~identPart\n    instr\n    = caseInsensitive<\"instr\"> ~identPart\n    int\n    = caseInsensitive<\"int\"> ~identPart\n    joy\n    = caseInsensitive<\"joy\"> ~identPart\n    key\n    = caseInsensitive<\"key\"> ~identPart\n    left\n    = caseInsensitive<\"left$\"> ~identPart\n    len\n    = caseInsensitive<\"len\"> ~identPart\n    let\n    = caseInsensitive<\"let\"> ~identPart\n    line\n    = caseInsensitive<\"line\"> ~identPart\n    list\n    = caseInsensitive<\"list\"> ~identPart\n    load\n    = caseInsensitive<\"load\"> ~identPart\n    locate\n    = caseInsensitive<\"locate\"> ~identPart\n    log\n    = caseInsensitive<\"log\"> ~identPart\n    log10\n    = caseInsensitive<\"log10\"> ~identPart\n    lower2\n    = caseInsensitive<\"lower$\"> ~identPart\n    mask\n    = caseInsensitive<\"mask\"> ~identPart\n    max\n    = caseInsensitive<\"max\"> ~identPart\n    memory\n    = caseInsensitive<\"memory\"> ~identPart\n    merge\n    = caseInsensitive<\"merge\"> ~identPart\n    mid\n    = caseInsensitive<\"mid$\"> ~identPart\n    min\n    = caseInsensitive<\"min\"> ~identPart\n    mod\n    = caseInsensitive<\"mod\"> ~identPart\n    mode\n    = caseInsensitive<\"mode\"> ~identPart\n    move\n    = caseInsensitive<\"move\"> ~identPart\n    mover\n    = caseInsensitive<\"mover\"> ~identPart\n    new\n    = caseInsensitive<\"new\"> ~identPart\n    next\n    = caseInsensitive<\"next\"> ~identPart\n    not\n    = caseInsensitive<\"not\"> ~identPart\n    on\n    = caseInsensitive<\"on\"> ~identPart\n    openin\n    = caseInsensitive<\"openin\"> ~identPart\n    openout\n    = caseInsensitive<\"openout\"> ~identPart\n    or\n    = caseInsensitive<\"or\"> ~identPart\n    origin\n    = caseInsensitive<\"origin\"> ~identPart\n    out\n    = caseInsensitive<\"out\"> ~identPart\n    paper\n    = caseInsensitive<\"paper\"> ~identPart\n    peek\n    = caseInsensitive<\"peek\"> ~identPart\n    pen\n    = caseInsensitive<\"pen\"> ~identPart\n    pi\n    = caseInsensitive<\"pi\"> ~identPart\n    plot\n    = caseInsensitive<\"plot\"> ~identPart\n    plotr\n    = caseInsensitive<\"plotr\"> ~identPart\n    poke\n    = caseInsensitive<\"poke\"> ~identPart\n    pos\n    = caseInsensitive<\"pos\"> ~identPart\n    print\n    = caseInsensitive<\"print\"> ~identPart\n    rad\n    = caseInsensitive<\"rad\"> ~identPart\n    randomize\n    = caseInsensitive<\"randomize\"> ~identPart\n    read\n    = caseInsensitive<\"read\"> ~identPart\n    release\n    = caseInsensitive<\"release\"> ~identPart\n    rem\n    = caseInsensitive<\"rem\"> ~identPart\n    remain\n    = caseInsensitive<\"remain\"> ~identPart\n    renum\n    = caseInsensitive<\"renum\"> ~identPart\n    restore\n    = caseInsensitive<\"restore\"> ~identPart\n    resume\n    = caseInsensitive<\"resume\"> ~identPart\n    return\n    = caseInsensitive<\"return\"> ~identPart\n    right\n    = caseInsensitive<\"right$\"> ~identPart\n    rnd\n    = caseInsensitive<\"rnd\"> ~identPart\n    round\n    = caseInsensitive<\"round\"> ~identPart\n    run\n    = caseInsensitive<\"run\"> ~identPart\n    save\n    = caseInsensitive<\"save\"> ~identPart\n    sgn\n    = caseInsensitive<\"sgn\"> ~identPart\n    sin\n    = caseInsensitive<\"sin\"> ~identPart\n    sound\n    = caseInsensitive<\"sound\"> ~identPart\n    space2\n    = caseInsensitive<\"space\"> ~identPart\n    spc\n    = caseInsensitive<\"spc\"> ~identPart\n    speed\n    = caseInsensitive<\"speed\"> ~identPart\n    sq\n    = caseInsensitive<\"sq\"> ~identPart\n    sqr\n    = caseInsensitive<\"sqr\"> ~identPart\n    step\n    = caseInsensitive<\"step\"> ~identPart\n    stop\n    = caseInsensitive<\"stop\"> ~identPart\n    str\n    = caseInsensitive<\"str$\"> ~identPart\n    string2\n    = caseInsensitive<\"string$\"> ~identPart\n    swap\n    = caseInsensitive<\"swap\"> ~identPart\n    symbol\n    = caseInsensitive<\"symbol\"> ~identPart\n    tab\n    = caseInsensitive<\"tab\"> ~identPart\n    tag\n    = caseInsensitive<\"tag\"> ~identPart\n    tagoff\n    = caseInsensitive<\"tagoff\"> ~identPart\n    tan\n    = caseInsensitive<\"tan\"> ~identPart\n    test\n    = caseInsensitive<\"test\"> ~identPart\n    testr\n    = caseInsensitive<\"testr\"> ~identPart\n    then\n    = caseInsensitive<\"then\"> ~identPart\n    time\n    = caseInsensitive<\"time\"> ~identPart\n    to\n    = caseInsensitive<\"to\"> ~identPart\n    troff\n    = caseInsensitive<\"troff\"> ~identPart\n    tron\n    = caseInsensitive<\"tron\"> ~identPart\n    unt\n    = caseInsensitive<\"unt\"> ~identPart\n    upper2\n    = caseInsensitive<\"upper$\"> ~identPart\n    using\n    = caseInsensitive<\"using\"> ~identPart\n    val\n    = caseInsensitive<\"val\"> ~identPart\n    vpos\n    = caseInsensitive<\"vpos\"> ~identPart\n    wait\n    = caseInsensitive<\"wait\"> ~identPart\n    wend\n    = caseInsensitive<\"wend\"> ~identPart\n    while\n    = caseInsensitive<\"while\"> ~identPart\n    width\n    = caseInsensitive<\"width\"> ~identPart\n    window\n    = caseInsensitive<\"window\"> ~identPart\n    write\n    = caseInsensitive<\"write\"> ~identPart\n    xor\n    = caseInsensitive<\"xor\"> ~identPart\n    xpos\n    = caseInsensitive<\"xpos\"> ~identPart\n    ypos\n    = caseInsensitive<\"ypos\"> ~identPart\n    zone\n    = caseInsensitive<\"zone\"> ~identPart\n\n\n    ident (an identifier) =\n      ~keyword identName\n\n    identName = identStart identPart*\n\n    identStart = letter\n\n    identPart = identStart | digit\n\n    variable = ident\n\n    strIdent\n     = ~keyword identName (\"$\")\n\n    binaryDigit = \"0\"..\"1\"\n\n    decimalValue  (decimal number)\n      = digit* \".\" digit+  -- fract\n      | digit+             -- whole\n\n    hexValue\n      = \"&\" hexDigit+\n\n    binaryValue\n      = caseInsensitive<\"&x\"> binaryDigit+\n\n    number  (a number)\n      = decimalValue\n      | hexValue\n      | binaryValue\n\n    partToEol\n      = (~eol any)*\n\n    string = \"\\\\\"\" (\"\\\\\\\\\\\\\"\" | (~\"\\\\\"\" any))* \"\\\\\"\"\n\n    label = digit+\n\n    space := \" \" | \"\\t\"\n\n    eol (end of line)\n        = \"\\\\n\"\n    }\n  `\n};\n","// Log.ts\n\nexport class Log {\n\tpublic logIt(str: string) {\n\t\tconsole.log(Date.now(), \"LOG:\", str);\n\t}\n}\n","// parser.ts\n// A simple parser for arithmetic expressions using Ohm; version x\n//\n// Usage:\n// node dist/pagestest1.js input=\"?3 + 5 * (2 - 8)\"\n// node dist/pagestest1.js fileName=dist/examples/example.bas\n// node dist/pagestest1.js example=euler\n//\n// [ npx ts-node parser.ts input=\"?3 + 5 * (2 - 8)\" ]\n\nimport { ActionDict, Grammar, grammar, Node, Semantics } from \"ohm-js\";\nimport { arithmetic } from \"./arithmetic\";\nimport { Log } from \"./Log\";\n\nexport type ConfigEntryType = string | number | boolean;\n\nexport type ConfigType = Record<string, ConfigEntryType>;\n\nconst startConfig: ConfigType = {\n\tdebug: 0,\n\texample: \"\",\n\tfileName: \"\",\n\tinput: \"\"\n};\n\n\nconst examples: Record<string, string> = {};\n\n\ntype VariableValue = string | number | Function | [] | VariableValue[]; // eslint-disable-line @typescript-eslint/ban-types\n\nfunction dimArray(dims: number[], initVal: string | number = 0) {\n\tconst createRecursiveArray = function (depth: number) {\n\t\tconst length = dims[depth] + 1, // +1 because of 0-based index\n\t\t\tarray: VariableValue[] = new Array(length);\n\n\t\tdepth += 1;\n\t\tif (depth < dims.length) { // more dimensions?\n\t\t\tfor (let i = 0; i < length; i += 1) {\n\t\t\t\tarray[i] = createRecursiveArray(depth); // recursive call\n\t\t\t}\n\t\t} else { // one dimension\n\t\t\tarray.fill(initVal);\n\t\t}\n\t\treturn array;\n\t};\n\treturn createRecursiveArray(0);\n}\n\nconst vm = {\n\t_output: \"\",\n\t_fnOnCls: (() => undefined) as () => void,\n\tdimArray: dimArray,\n\tcls: () => {\n\t\tvm._output = \"\";\n\t\tvm._fnOnCls();\n\t},\n\tprint: (...args: string[]) => vm._output += args.join(''),\n\n\tgetOutput: () => vm._output,\n\tsetOutput: (str: string) => vm._output = str,\n\tsetOnCls: (fn: () => void) => vm._fnOnCls = fn\n}\n\nclass Parser {\n\tprivate readonly ohmGrammar: Grammar;\n\tprivate readonly ohmSemantics: Semantics;\n\n\tconstructor(grammarString: string, semanticsMap: ActionDict<string | string[]>) {\n\t\tthis.ohmGrammar = grammar(grammarString);\n\t\tthis.ohmSemantics = this.ohmGrammar\n\t\t\t.createSemantics()\n\t\t\t.addOperation<string | string[]>(\"eval\", semanticsMap);\n\t}\n\n\t// Function to parse and evaluate an expression\n\tparseAndEval(input: string) {\n\t\ttry {\n\t\t\tconst matchResult = this.ohmGrammar.match(input);\n\t\t\tif (matchResult.succeeded()) {\n\t\t\t\treturn this.ohmSemantics(matchResult).eval();\n\t\t\t} else {\n\t\t\t\treturn 'ERROR: Parsing failed: ' + matchResult.message;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn 'ERROR: Parsing evaluator failed: ' + (error instanceof Error ? error.message : \"unknown\");\n\t\t}\n\t}\n}\n\nconst variables: Record<string, number> = {};\n\nconst reJsKeyword = /^(arguments|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/;\n\nfunction getVariable(name: string) {\n\tname = name.toLowerCase();\n\tif (reJsKeyword.test(name)) {\n\t\tname = `_${name}`;\n\t}\n\n\tvariables[name] = (variables[name] || 0) + 1;\n\treturn name;\n}\n\nfunction deleteAllItems(items: Record<string, any>) {\n\tfor (const name in items) { // eslint-disable-line guard-for-in\n\t\tdelete items[name];\n\t}\n}\n\ntype DefinedLabelEntryType = {\n\tlabel: string,\n\tfirst: number,\n\tlast: number,\n\tdataIndex: number\n}\n\ntype GosubLabelEntryType = {\n\tcount: number\n}\n\nconst definedLabels: DefinedLabelEntryType[] = [];\nconst gosubLabels: Record<string, GosubLabelEntryType> = {};\nlet lineIndex = 0;\n\nconst dataList: (string | number)[] = [];\nconst restoreMap: Record<string, number> = {};\n\nfunction addDefinedLabel(label: string, line: number) {\n\tdefinedLabels.push({\n\t\tlabel,\n\t\tfirst: line,\n\t\tlast: -1,\n\t\tdataIndex: -1\n\t});\n}\n\nfunction addGosubLabel(label: string) {\n\tgosubLabels[label] = gosubLabels[label] || {\n\t\tcount: 0\n\t};\n\n\tgosubLabels[label].count = (gosubLabels[label].count || 0) + 1;\n}\n\nfunction addRestoreLabel(label: string) {\n\trestoreMap[label] = -1;\n}\n\nfunction resetParser() {\n\tdeleteAllItems(variables);\n\tdefinedLabels.length = 0;\n\tdeleteAllItems(gosubLabels);\n\tlineIndex = 0;\n\tdataList.length = 0;\n\tdeleteAllItems(restoreMap);\n}\n\nfunction evalChildren(children: Node[]) {\n\treturn children.map(c => c.eval());\n}\n\n// Semantics to evaluate an arithmetic expression\nconst semantics: ActionDict<string | string[]> = {\n\tProgram(lines: Node) {\n\t\tconst lineList = evalChildren(lines.children);\n\n\t\tconst variabeList = Object.keys(variables);\n\t\tconst varStr = variabeList.length ? \"let \" + variabeList.map((v) => v.endsWith(\"$\") ? `${v} = \"\"` : `${v} = 0`).join(\", \") + \";\\n\" : \"\";\n\n\t\t// find subroutines\n\t\tlet subFirst: DefinedLabelEntryType | undefined;\n\t\tfor (let index = 0; index < definedLabels.length; index += 1) {\n\t\t\tconst item = definedLabels[index];\n\t\t\tif (gosubLabels[item.label]) {\n\t\t\t\tsubFirst = item;\n\t\t\t}\n\n\t\t\tif (subFirst && item.last >= 0) {\n\t\t\t\tconst first = subFirst.first;\n\t\t\t\tconst indent = lineList[first].search(/\\S|$/);\n\t\t\t\tconst indentStr = \" \".repeat(indent);\n\n\t\t\t\tfor (let i = first; i <= item.last; i += 1) {\n\t\t\t\t\tlineList[i] = \"  \" + lineList[i]; // ident\n\t\t\t\t}\n\n\t\t\t\tlineList[first] = `${indentStr}function _${subFirst.label}() {${indentStr}\\n` + lineList[first];\n\t\t\t\tlineList[item.last] += `\\n${indentStr}` + \"}\"; //TS issue when using the following? `\\n${indentStr}};`\n\t\t\t\tsubFirst = undefined;\n\t\t\t}\n\n\t\t\tif (restoreMap[item.label] === -1) {\n\t\t\t\trestoreMap[item.label] = item.dataIndex;\n\t\t\t}\n\t\t}\n\n\t\tif (dataList.length) {\n\t\t\tlineList.unshift(`const _data = _getData();\\nconst _restoreMap = _getRestore();\\nlet _dataPrt = 0;`);\n\t\t\tlineList.push(`function _getData() {\\nreturn [\\n${dataList.join(\",\\n\")}\\n];\\n}`);\n\t\t\tlineList.push(`function _getRestore() {\\nreturn [\\n${JSON.stringify(restoreMap)}\\n];\\n}`);\n\t\t}\n\n\t\tconst lineStr = lineList.join('\\n');\n\t\treturn varStr + lineStr;\n\t},\n\n\tLine(label: Node, stmts: Node, comment: Node, _eol: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst labelStr = label.sourceString;\n\n\t\tif (labelStr) {\n\t\t\taddDefinedLabel(labelStr, lineIndex);\n\t\t}\n\n\t\tconst lineStr = stmts.eval();\n\n\t\tif (lineStr === \"return\") {\n\t\t\tif (definedLabels.length) {\n\t\t\t\tconst lastLabelItem = definedLabels[definedLabels.length - 1];\n\t\t\t\tlastLabelItem.last = lineIndex;\n\t\t\t}\n\t\t}\n\n\t\tconst commentStr = comment.sourceString ? `; //${comment.sourceString.substring(1)}` : \"\";\n\t\tconst semi = lineStr === \"\" || lineStr.endsWith(\"{\") || lineStr.startsWith(\"//\") || commentStr ? \"\" : \";\";\n\t\tlineIndex += 1;\n\t\treturn lineStr + commentStr + semi;\n\t},\n\n\tStatements(stmt: Node, _stmtSep: Node, stmts: Node) {\n\t\treturn [stmt.eval(), ...evalChildren(stmts.children)].join('; ');\n\t\t//TODO: return [stmt.eval(), ...evalChildren(stmts.children)].map((e) => e.endsWith(\"{\") ? e : `${e};`).join(' ');\n\t},\n\n\tArrayAssign(ident: Node, _op: Node, e: Node): string {\n\t\treturn `${ident.eval()} = ${e.eval()}`;\n\t},\n\n\tAssign(ident: Node, _op: Node, e: Node): string {\n\t\tconst name = ident.sourceString;\n\t\tconst name2 = getVariable(name);\n\t\tconst value = e.eval();\n\t\treturn `${name2} = ${value}`;\n\t},\n\n\tPrintArgs(arg: Node, _printSep: Node, args: Node) {\n\t\treturn [arg.eval(), ...evalChildren(args.children)].join(', ');\n\t},\n\tPrint(_printLit: Node, params: Node, semi: Node) {\n\t\tconst paramStr = params.child(0)?.eval() || \"\";\n\n\t\tlet newlineStr = \"\";\n\t\tif (!semi.sourceString) {\n\t\t\tnewlineStr = paramStr ? ` + \"\\\\n\"` : `\"\\\\n\"`;\n\t\t}\n\t\treturn `_o.print(${paramStr}${newlineStr})`;\n\t},\n\n\tAbs(_absLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.abs(${e.eval()})`;\n\t},\n\n\tAsc(_ascLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e.eval()}).charCodeAt(0)`;\n\t},\n\n\tAtn(_atnLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.atan(${e.eval()})`;\n\t},\n\n\tBin(_binLit: Node, _open: Node, e: Node, _comma: Node, n: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst pad = n.child(0)?.eval();\n\t\tconst padStr = pad !== undefined ? `.padStart(${pad} || 0, \"0\")` : '';\n\t\treturn `(${e.eval()}).toString(2).toUpperCase()${padStr}`;\n\t},\n\n\tChr(_chrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `String.fromCharCode(${e.eval()})`;\n\t},\n\n\tComment(_commentLit: Node, remain: Node) {\n\t\treturn `//${remain.sourceString}`;\n\t},\n\n\tCos(_cosLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.cos(${e.eval()})`;\n\t},\n\n\tData(_datalit: Node, args: Node) {\n\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\t\tconst dataIndex = dataList.length;\n\n\t\tif (definedLabels.length) {\n\t\t\tconst currentLabel = definedLabels[definedLabels.length - 1];\n\t\t\tcurrentLabel.dataIndex = dataIndex;\n\t\t}\n\n\t\tdataList.push(argList.join(\", \"));\n\t\treturn \"\";\n\t},\n\n\tDim(_dimLit: Node, arrayIdents: Node) {\n\t\tconst argList = arrayIdents.asIteration().children.map(c => c.eval());\n\t\tconst results: string[] = [];\n\n\t\tfor (const arg of argList) {\n\t\t\tconst [ident, ...indices] = arg;\n\t\t\tconst initValStr = ident.endsWith(\"$\") ? ', \"\"' : '';\n\t\t\tresults.push(`${ident} = _o.dimArray([${indices}]${initValStr})`);  // automatically joined with comma\n\t\t}\n\n\t\treturn results.join(\"; \");\n\t},\n\n\tCint(_cintLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.round(${e.eval()})`;\n\t},\n\n\tCls(_clsLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `_o.cls()`;\n\t},\n\n\tComparison(_iflit: Node, condExp: Node, _thenLit: Node, thenStat: Node, elseLit: Node, elseStat: Node) {\n\t\tconst cond = condExp.eval();\n\t\tconst thSt = thenStat.eval();\n\n\t\tlet result = `if (${cond}) {\\n${thSt}\\n}`; // put in newlines to also allow line comments\n\t\tif (elseLit.sourceString) {\n\t\t\tconst elseSt = evalChildren(elseStat.children).join('; ');\n\t\t\tresult += ` else {\\n${elseSt}\\n}`;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tEnd(_endLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `return \"end\"`;\n\t},\n\n\tExp(_expLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.exp(${e.eval()})`;\n\t},\n\n\tFix(_fixLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.trunc(${e.eval()})`;\n\t},\n\n\tForLoop(_forLit: Node, variable: Node, _eqSign: Node, start: Node, _dirLit: Node, end: Node, _stepLit: Node, step: Node) {\n\t\tconst varExp = variable.eval();\n\t\tconst startExp = start.eval();\n\t\tconst endExp = end.eval();\n\t\tconst stepExp = step.child(0)?.eval() || \"1\";\n\n\t\tconst stepAsNum = Number(stepExp);\n\n\t\tlet cmpSt = \"\";\n\t\tif (isNaN(stepAsNum)) {\n\t\t\tcmpSt = `${stepExp} >= 0 ? ${varExp} <= ${endExp} : ${varExp} >= ${endExp}`\n\t\t} else {\n\t\t\tcmpSt = stepExp >= 0 ? `${varExp} <= ${endExp}` : `${varExp} >= ${endExp}`;\n\t\t}\n\n\t\tconst result = `for (${varExp} = ${startExp}; ${cmpSt}; ${varExp} += ${stepExp}) {`;\n\n\t\treturn result;\n\t},\n\n\tGosub(_gosubLit: Node, e: Node) {\n\t\tconst labelStr = e.sourceString;\n\t\taddGosubLabel(labelStr);\n\n\t\treturn `_${labelStr}()`;\n\t},\n\n\tHex(_hexLit: Node, _open: Node, e: Node, _comma: Node, n: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst pad = n.child(0)?.eval();\n\t\tconst padStr = pad !== undefined ? `.padStart(${pad} || 0, \"0\")` : '';\n\t\treturn `(${e.eval()}).toString(16).toUpperCase()${padStr}`;\n\t},\n\n\tInt(_intLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.floor(${e.eval()})`;\n\t},\n\n\tLeft(_leftLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e1.eval()}).slice(0, ${e2.eval()})`;\n\t},\n\n\tLen(_lenLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e.eval()}).length`;\n\t},\n\n\tLog(_logLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.log(${e.eval()})`;\n\t},\n\n\tLog10(_log10Lit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.log10(${e.eval()})`;\n\t},\n\n\tLower(_lowerLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e.eval()}).toLowerCase()`;\n\t},\n\n\tMax(_maxLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst argList = args.asIteration().children.map(c => c.eval()); // see also: ArrayArgs\n\t\treturn `Math.max(${argList})`;\n\t},\n\n\tMid(_midLit: Node, _open: Node, e1: Node, _comma1: Node, e2: Node, _comma2: Node, e3: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst length = e3.child(0)?.eval();\n\t\tconst lengthStr = length === undefined ? \"\" : `, ${length}`;\n\t\treturn `(${e1.eval()}).substr(${e2.eval()} - 1${lengthStr})`;\n\t},\n\n\tMin(_minLit: Node, _open: Node, args: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst argList = args.asIteration().children.map(c => c.eval()); // see also: ArrayArgs\n\t\treturn `Math.min(${argList})`;\n\t},\n\n\tNext(_nextLit: Node, variables: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst argList = variables.asIteration().children.map(c => c.eval());\n\t\tif (!argList.length) {\n\t\t\targList.push(\"_any\");\n\t\t}\n\t\treturn '}'.repeat(argList.length);\n\t},\n\n\tOn(_nLit: Node, e1: Node, _gosubLit: Node, args: Node) {\n\t\tconst index = e1.eval();\n\t\tconst argList = args.asIteration().children.map(c => c.sourceString);\n\n\t\tfor (let i = 0; i < argList.length; i += 1) {\n\t\t\taddGosubLabel(argList[i]);\n\t\t}\n\n\t\treturn `[${argList.map((label) => `_${label}`).join(\",\")}]?.[${index} - 1]()`; // 1-based index\n\t},\n\n\tPi(_piLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn \"Math.PI\";\n\t},\n\n\tRead(_readlit: Node, args: Node) {\n\t\tconst argList = args.asIteration().children.map(c => c.eval());\n\t\tconst results: string[] = [];\n\t\tfor (const ident of argList) {\n\t\t\tresults.push(`${ident} = _data[_dataPrt++]`);\n\t\t}\n\t\treturn results.join(\"; \");\n\t},\n\n\tRem(_remLit: Node, remain: Node) {\n\t\treturn `// ${remain.sourceString}`;\n\t},\n\n\tRestore(_restoreLit: Node, e: Node) {\n\t\tconst labelStr = e.sourceString || \"0\";\n\t\taddRestoreLabel(labelStr);\n\n\t\treturn `_dataPtr = _restoreMap[${labelStr}]`;\n\t},\n\n\tReturn(_returnLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn \"return\";\n\t},\n\n\tRight(_rightLit: Node, _open: Node, e1: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e1.eval()}).slice(-${e2.eval()})`;\n\t},\n\n\tRnd(_rndLit: Node, _open: Node, _e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t// args are ignored\n\t\treturn `Math.random()`;\n\t},\n\n\tRound(_roundLit: Node, _open: Node, e: Node, _comma: Node, e2: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst dec = e2.child(0)?.eval();\n\t\tif (dec) {\n\t\t\treturn `(Math.round(${e.eval()} * Math.pow(10, ${dec})) / Math.pow(10, ${dec}))`;\n\t\t}\n\t\treturn `Math.round(${e.eval()})`;\n\t\t// A better way to avoid rounding errors: https://www.jacklmoore.com/notes/rounding-in-javascript\n\t},\n\n\tSgn(_sgnLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.sign(${e.eval()})`;\n\t},\n\n\tSin(_sinLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.sin(${e.eval()})`;\n\t},\n\n\tSpace2(_stringLit: Node, _open: Node, len: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `\" \".repeat(${len.eval()})`;\n\t},\n\n\tSqr(_sqrLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.sqrt(${e.eval()})`;\n\t},\n\n\tStop(_stopLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `return \"stop\"`;\n\t},\n\n\tStr(_strLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `String(${e.eval()})`; // TODO: additional space for n>0?\n\t},\n\n\tString2(_stringLit: Node, _open: Node, len: Node, _commaLit: Node, chr: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\t// Note: String$: we only support second parameter as string; we do not use charAt(0) to get just one char\n\t\treturn `(${chr.eval()}).repeat(${len.eval()})`;\n\t},\n\n\tTan(_tanLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Math.tan(${e.eval()})`;\n\t},\n\n\tTime(_timeLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `Date.now()`; // TODO; or *300/1000\n\t},\n\n\tUpper(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e.eval()}).toUpperCase()`;\n\t},\n\n\tVal(_upperLit: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\tconst numPattern = /^\"[\\\\+\\\\-]?\\d*\\.?\\d+(?:[Ee][\\\\+\\\\-]?\\d+)?\"$/;\n\t\tconst numStr = String(e.eval());\n\n\t\tif (numPattern.test(numStr)) {\n\t\t\treturn `Number(${numStr})`; // for non-hex/bin number strings we can use this simple version\n\t\t}\n\t\treturn `Number((${numStr}).replace(\"&x\", \"0b\").replace(\"&\", \"0x\"))`;\n\t},\n\n\tWend(_wendLit: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn '}';\n\t},\n\n\tWhileLoop(_whileLit: Node, e: Node) {\n\t\tconst cond = e.eval();\n\t\treturn `while (${cond}) {`;\n\t},\n\n\tStrOrNumExp(e: Node) {\n\t\treturn String(e.eval());\n\t},\n\n\tXorExp_xor(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} ^ ${b.eval()}`;\n\t},\n\n\tOrExp_or(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} | ${b.eval()}`;\n\t},\n\n\tAndExp_and(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} & ${b.eval()}`;\n\t},\n\n\tNotExp_not(_op: Node, e: Node) {\n\t\treturn `~(${e.eval()})`;\n\t},\n\n\tCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} === ${b.eval()} ? -1 : 0`;\n\t},\n\tCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} !== ${b.eval()} ? -1 : 0`;\n\t},\n\tCmpExp_lt(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} < ${b.eval()} ? -1 : 0`;\n\t},\n\tCmpExp_le(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} <= ${b.eval()} ? -1 : 0`;\n\t},\n\tCmpExp_gt(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} > ${b.eval()} ? -1 : 0`;\n\t},\n\tCmpExp_ge(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} >= ${b.eval()} ? -1 : 0`;\n\t},\n\n\tAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} + ${b.eval()}`;\n\t},\n\tAddExp_minus(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} - ${b.eval()}`;\n\t},\n\n\tModExp_mod(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} % ${b.eval()}`;\n\t},\n\n\tDivExp_div(a: Node, _op: Node, b: Node) {\n\t\treturn `(${a.eval()} / ${b.eval()}) | 0`;\n\t},\n\n\tMulExp_times(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} * ${b.eval()}`;\n\t},\n\tMulExp_divide(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} / ${b.eval()}`;\n\t},\n\n\tExpExp_power(a: Node, _: Node, b: Node) {\n\t\treturn `Math.pow(${a.eval()}, ${b.eval()})`;\n\t},\n\n\tPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e.eval()})`;\n\t},\n\tPriExp_pos(_op: Node, e: Node) {\n\t\treturn String(e.eval());\n\t},\n\tPriExp_neg(_op: Node, e: Node) {\n\t\treturn `-${e.eval()}`;\n\t},\n\n\tStrCmpExp_eq(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} === ${b.eval()} ? -1 : 0`;\n\t},\n\tStrCmpExp_ne(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} !== ${b.eval()} ? -1 : 0`;\n\t},\n\n\tStrAddExp_plus(a: Node, _op: Node, b: Node) {\n\t\treturn `${a.eval()} + ${b.eval()}`;\n\t},\n\n\tStrPriExp_paren(_open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `(${e.eval()})`;\n\t},\n\n\tArrayArgs(args: Node) {\n\t\treturn args.asIteration().children.map(c => String(c.eval()));\n\t},\n\n\tArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `${ident.eval()}[${e.eval().join(\"][\")}]`;\n\t},\n\n\tStrArrayIdent(ident: Node, _open: Node, e: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `${ident.eval()}[${e.eval().join(\"][\")}]`;\n\t},\n\n\tDimArrayIdent(ident: Node, _open: Node, indices: Node, _close: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn [ident.eval(), ...indices.eval()]; //TTT\n\t},\n\n\tdecimalValue(value: Node) {\n\t\treturn value.sourceString;\n\t},\n\n\thexValue(_prefix: Node, value: Node) {\n\t\treturn `0x${value.sourceString}`;\n\t},\n\n\tbinaryValue(_prefix: Node, value: Node) {\n\t\treturn `0b${value.sourceString}`;\n\t},\n\n\tstring(_quote1: Node, e: Node, _quote2: Node) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\t\treturn `\"${e.sourceString}\"`;\n\t},\n\n\tident(ident: Node) {\n\t\tconst name = ident.sourceString;\n\t\treturn getVariable(name);\n\t},\n\n\tstrIdent(ident: Node, typeSuffix: Node) {\n\t\tconst name = ident.sourceString + typeSuffix.sourceString;\n\t\treturn getVariable(name);\n\t}\n};\n\n\nconst arithmeticParser = new Parser(arithmetic.grammar, semantics);\n\nfunction compileScript(script: string) {\n\tresetParser();\n\n\tconst compiledScript = arithmeticParser.parseAndEval(script);\n\treturn compiledScript;\n}\n\nasync function executeScript(compiledScript: string) {\n\tvm.setOutput(\"\");\n\n\tif (compiledScript.startsWith(\"ERROR\")) {\n\t\treturn \"ERROR\" + \"\\n\";\n\t}\n\n\tlet output: string;\n\ttry {\n\t\tconst fnScript = new Function(\"_o\", compiledScript); // eslint-disable-line no-new-func\n\t\tconst result = fnScript(vm) || \"\";\n\t\tif (result instanceof Promise) {\n\t\t\toutput = vm.getOutput() + await result;\n\t\t} else {\n\t\t\toutput = vm.getOutput() + result;\n\t\t}\n\n\t} catch (error) {\n\t\toutput = \"ERROR: \";\n\t\tif (error instanceof Error) {\n\t\t\toutput += error.message;\n\n\t\t\tconst anyErr = error as any;\n\t\t\tconst lineNumber = anyErr.lineNumber; // only on FireFox\n\t\t\tconst columnNumber = anyErr.columnNumber; // only on FireFox\n\n\t\t\tif (lineNumber || columnNumber) {\n\t\t\t\tconst errLine = lineNumber - 2; // for some reason line 0 is 2\n\t\t\t\toutput += ` (line ${errLine}, column ${columnNumber})`;\n\t\t\t}\n\t\t} else {\n\t\t\toutput += \"unknown\";\n\t\t}\n\t}\n\treturn output + \"\\n\";\n}\n\nlet basicCm: any;\nlet compiledCm: any;\n\nfunction getOutputText() {\n\tconst outputText = document.getElementById(\"outputText\") as HTMLTextAreaElement;\n\treturn outputText.value;\n}\n\nfunction setOutputText(value: string) {\n\tconst outputText = document.getElementById(\"outputText\") as HTMLTextAreaElement;\n\toutputText.value = value;\n}\n\nasync function onExecuteButtonClick(_event: Event) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\tconst compiledText = document.getElementById(\"compiledText\") as HTMLTextAreaElement;\n\n\tconst compiledScript = compiledCm ? compiledCm.getValue() : compiledText.value;\n\n\tconst output = await executeScript(compiledScript);\n\n\tsetOutputText(getOutputText() + output);\n}\n\nfunction oncompiledTextChange(_event: Event) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\tconst autoExecuteInput = document.getElementById(\"autoExecuteInput\") as HTMLInputElement;\n\tif (autoExecuteInput.checked) {\n\t\tconst executeButton = window.document.getElementById(\"executeButton\") as HTMLButtonElement;\n\t\texecuteButton.dispatchEvent(new Event('click'));\n\t}\n}\n\nfunction onCompileButtonClick(_event: Event) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\tconst basicText = document.getElementById(\"basicText\") as HTMLTextAreaElement;\n\tconst compiledText = document.getElementById(\"compiledText\") as HTMLTextAreaElement;\n\tconst input = compiledCm ? basicCm.getValue() : basicText.value;\n\tconst compiledScript = compileScript(input);\n\n\tif (compiledCm) {\n\t\tcompiledCm.setValue(compiledScript);\n\t} else {\n\t\tcompiledText.value = compiledScript;\n\t\tconst autoExecuteInput = document.getElementById(\"autoExecuteInput\") as HTMLInputElement;\n\t\tif (autoExecuteInput.checked) {\n\t\t\tconst newEvent = new Event('change');\n\t\t\tcompiledText.dispatchEvent(newEvent);\n\t\t}\n\t}\n}\n\nfunction onbasicTextChange(_event: Event) { // eslint-disable-line @typescript-eslint/no-unused-vars\n\tconst autoCompileInput = document.getElementById(\"autoCompileInput\") as HTMLInputElement;\n\tif (autoCompileInput.checked) {\n\t\tconst compileButton = window.document.getElementById(\"compileButton\") as HTMLButtonElement;\n\t\tcompileButton.dispatchEvent(new Event('click'));\n\t}\n}\n\nfunction onExampleSelectChange(event: Event) {\n\tconst exampleSelect = event.target as HTMLSelectElement;\n\n\tconst basicText = document.getElementById(\"basicText\") as HTMLTextAreaElement;\n\tconst value = examples[exampleSelect.value];\n\n\tsetOutputText(\"\");\n\n\tif (basicCm) {\n\t\tbasicCm.setValue(value);\n\t} else {\n\t\tbasicText.value = value;\n\t\tbasicText.dispatchEvent(new Event('change'));\n\t}\n}\n\n\nfunction setExampleSelectOptions(examples: Record<string, string>) {\n\tconst exampleSelect = document.getElementById(\"exampleSelect\") as HTMLSelectElement;\n\n\tfor (const key of Object.keys(examples)) {\n\t\tconst value = key; //examples[key];\n\t\tconst option = window.document.createElement(\"option\");\n\n\t\toption.value = value;\n\t\toption.text = value;\n\t\toption.title = value;\n\t\toption.selected = false;\n\t\texampleSelect.add(option);\n\t}\n}\n\n\nfunction debounce<T extends Function>(func: T, delay: number): (...args: any[]) => void {\n\tlet timeoutId: ReturnType<typeof setTimeout>;\n\treturn function (this: any, ...args: any[]) {\n\t\tconst context = this;\n\t\tclearTimeout(timeoutId);\n\t\ttimeoutId = setTimeout(() => {\n\t\t\tfunc.apply(context, args);\n\t\t}, delay);\n\t};\n}\n\n\nfunction fnHereDoc(fn: () => void) {\n\treturn String(fn).\n\t\treplace(/^[^/]+\\/\\*\\S*/, \"\").\n\t\treplace(/\\*\\/[^/]+$/, \"\");\n}\n\nfunction addItem(key: string, input: string | (() => void)) {\n\tlet inputString = (typeof input !== \"string\") ? fnHereDoc(input) : input;\n\tinputString = inputString.replace(/^\\n/, \"\").replace(/\\n$/, \"\"); // remove preceding and trailing newlines\n\t// beware of data files ending with newlines! (do not use trimEnd)\n\n\tif (!key) { // maybe \"\"\n\t\tconst matches = inputString.match(/^\\s*\\d*\\s*(?:REM|rem|')\\s*(\\w+)/);\n\t\tkey = matches ? matches[1] : \"unknown\";\n\t}\n\n\texamples[key] = inputString;\n}\n\n\n\ninterface NodeFs {\n\t//readFile: (name: string, encoding: string, fn: (res: any) => void) => any\n\tpromises: any;\n}\n\nlet fs: NodeFs;\nlet modulePath: string;\n\ndeclare function require(name: string): any;\n\nasync function nodeReadFile(name: string): Promise<string> {\n\tif (!fs) {\n\t\tfs = require(\"fs\");\n\t}\n\n\tif (!module) {\n\t\tmodule = require(\"module\");\n\t\tmodulePath = (module as any).path || \"\";\n\n\t\tif (!modulePath) {\n\t\t\tconsole.warn(\"nodeReadFile: Cannot determine module path\");\n\t\t}\n\t}\n\treturn fs.promises.readFile(name, \"utf8\");\n}\n\nfunction fnParseArgs(args: string[], config: ConfigType) {\n\tfor (let i = 0; i < args.length; i += 1) {\n\t\tconst [name, ...valueParts] = args[i].split(\"=\"),\n\t\t\tnameType = typeof config[name];\n\n\t\tlet value: ConfigEntryType = valueParts.join(\"=\");\n\t\tif (value !== undefined) {\n\t\t\tif (nameType === \"boolean\") {\n\t\t\t\tvalue = (value === \"true\");\n\t\t\t} else if (nameType === \"number\") {\n\t\t\t\tvalue = Number(value);\n\t\t\t}\n\t\t\tconfig[name] = value;\n\t\t}\n\t}\n\treturn config;\n}\n\nfunction fnDecodeUri(s: string) {\n\tlet decoded = \"\";\n\n\ttry {\n\t\tdecoded = decodeURIComponent(s.replace(/\\+/g, \" \"));\n\t} catch (err) {\n\t\tif (err instanceof Error) {\n\t\t\terr.message += \": \" + s;\n\t\t}\n\t\tconsole.error(err);\n\t}\n\treturn decoded;\n}\n\n// https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\nfunction fnParseUri(urlQuery: string, config: ConfigType) {\n\tconst rSearch = /([^&=]+)=?([^&]*)/g,\n\t\targs: string[] = [];\n\n\tlet match: RegExpExecArray | null;\n\n\twhile ((match = rSearch.exec(urlQuery)) !== null) {\n\t\tconst name = fnDecodeUri(match[1]),\n\t\t\tvalue = fnDecodeUri(match[2]);\n\n\t\tif (value !== null && config[name]) {\n\t\t\targs.push(name + \"=\" + value);\n\t\t}\n\t}\n\treturn fnParseArgs(args, config);\n}\n\n\nfunction start(input: string) {\n\tif (input !== \"\") {\n\t\tconst compiledScript = compileScript(input);\n\n\t\tconsole.log(\"INFO: Compiled:\\n\" + compiledScript + \"\\n\");\n\n\t\tconst timer = setTimeout(() => { }, 5000);\n\t\t(async () => {\n\t\t\tconst output = await executeScript(compiledScript);\n\t\t\tclearTimeout(timer);\n\t\t\tconsole.log(output);\n\t\t})();\n\t} else {\n\t\tconsole.log(\"No input\");\n\t}\n}\n\nfunction main(config: ConfigType) {\n\tlet input = (config.input as string) || \"\";\n\tlet timer: ReturnType<typeof setTimeout> | undefined;\n\n\tif (config.fileName) {\n\t\ttimer = setTimeout(() => { }, 5000);\n\t\t(async () => {\n\t\t\tinput = await nodeReadFile(config.fileName as string);\n\t\t\tclearTimeout(timer);\n\t\t\tstart(input);\n\t\t})();\n\t} else {\n\t\tif (config.example) {\n\t\t\tif (!Object.keys(examples).length) {\n\t\t\t\t// ?? require('./examples/examples.js');\n\t\t\t\ttimer = setTimeout(() => { }, 5000);\n\t\t\t\t(async () => {\n\t\t\t\t\tconst jsFile = await nodeReadFile(\"./dist/examples/examples.js\");\n\t\t\t\t\tconst fnScript = new Function(\"cpcBasic\", jsFile);\n\t\t\t\t\tfnScript({\n\t\t\t\t\t\taddItem: addItem\n\t\t\t\t\t});\n\n\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\tinput = examples[config.example as string];\n\t\t\t\t\tstart(input);\n\t\t\t\t})();\n\t\t\t}\n\t\t\tinput += examples[config.example as string];\n\t\t}\n\t\tif (timer === undefined) {\n\t\t\tconsole.log(\"start\");\n\t\t\tstart(input);\n\t\t}\n\t}\n}\n\nconst log = new Log();\n\nif (typeof window !== \"undefined\") {\n\t(window as any).cpcBasic = {\n\t\taddItem: addItem\n\t};\n\twindow.onload = () => {\n\t\tconst basicText = window.document.getElementById(\"basicText\") as HTMLTextAreaElement;\n\t\tbasicText.addEventListener('change', onbasicTextChange);\n\n\t\tconst compiledText = window.document.getElementById(\"compiledText\") as HTMLTextAreaElement;\n\t\tcompiledText.addEventListener('change', oncompiledTextChange);\n\n\t\tconst compileButton = window.document.getElementById(\"compileButton\") as HTMLButtonElement;\n\t\tcompileButton.addEventListener('click', onCompileButtonClick, false);\n\n\t\tconst executeButton = window.document.getElementById(\"executeButton\") as HTMLButtonElement;\n\t\texecuteButton.addEventListener('click', onExecuteButtonClick, false);\n\n\t\tconst exampleSelect = document.getElementById(\"exampleSelect\") as HTMLSelectElement;\n\t\texampleSelect.addEventListener('change', onExampleSelectChange);\n\n\t\tsetExampleSelectOptions(examples);\n\t\texampleSelect.dispatchEvent(new Event('change'));\n\n\t\tconst WinCodeMirror = (window as any).CodeMirror;\n\t\tif (WinCodeMirror) {\n\t\t\tconst debounceMs = 1000;\n\t\t\tbasicCm = WinCodeMirror.fromTextArea(basicText, {\n\t\t\t\tlineNumbers: true,\n\t\t\t\tmode: 'javascript'\n\t\t\t});\n\t\t\tbasicCm.on('changes', debounce(onbasicTextChange, debounceMs));\n\n\t\t\tcompiledCm = WinCodeMirror.fromTextArea(compiledText, {\n\t\t\t\tlineNumbers: true,\n\t\t\t\tmode: 'javascript'\n\t\t\t});\n\t\t\tcompiledCm.on('changes', debounce(oncompiledTextChange, debounceMs / 2));\n\t\t}\n\n\t\tvm.setOnCls(() => setOutputText(\"\"));\n\n\t\tmain(fnParseUri(window.location.search.substring(1), startConfig));\n\t};\n} else {\n\tlog.logIt(\"starting...\");\n\tmain(fnParseArgs(global.process.argv.slice(2), startConfig));\n}\n\nexport const testParser = {\n\tdimArray: dimArray\n};\n"],"names":["grammar"],"mappings":"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"}